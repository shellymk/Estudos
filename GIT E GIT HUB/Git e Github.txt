  GIT E GIT HUB:

GIT: É UM SOFTWATE DE CONTROLE DE VERSAO; VCS; VERSIONAMENTO

GITHUB: PLATAFORMA DE REDE SOCIAL PARA PROGRAMADORES.
------------------------------------------------------------------------
GIT: Muitas versoes de uma mesma coisa, o git nasceu em 1972

em 72: tem uma pessoa que ta criando um projeto e esse prjeto ta numa pasta, quando o cliente fala essa versao ta ok, ele noa gera um zip, ele faz um commit e manda para uma repositorio central, quando voce pega uma pasta monitora e manda pra um repositorio central, dizemos que estamos fzd um commit. essa versao é centralizado/linear


modelo distribuido: 

Mercurial
Bazaar
Code co-op
GNU arch
Monotone
Fossil
BitKeeper
Git

modelo centralizado/linear:

CA Software Change Manager(CCC)
Source Code Control System(SCCS
Panvalet
Concurrent Version System(CVS)
ClearCase
Visual SourceSafe
Perforce
---------------------------------------
principais vantagens:

*Controle de historico
*Trabalho em equipe
*Ramificaçoes de projeto: faz o coraçao do proj e cada um faz as ramificaçaoes e logo depois é possivel juntar e fazer o master
*Seguança
* Organizaçao
---------------------------------------------------------
O QUE É GITHUB?

COMMIT: JA TRABALHEI TO NA VERSAO QUE É INSTAVEL, POW A VERSAO TA LEGALA GR VO GERA UM ZIP VC N VAI MAIS GERA UM ZIP VC VAI COMMITAR, DPS VAI DA UMM PUSH PRA IR PRO REPOSITORIO REMOTO.

GIT SAO OS REPOSITORIOS LOCAIS

GITHUBS SAO REPOSITORIOS REMOTOS

ISSUES, NECESSIDADES DE OUTRAS PESSOAS, PODE CONHECER OUTROS COLABORADORES

COISAS QUE O GITHUB FAZ: 

REPOSITORIOS ILIMITADOS: SAO PROJETOS ILIMITADOS, PROVADOS E PUBLICOS, PRA PROJETOS FECHADOS PODE TER 3 COLABORADORES

HOSPEDAGEM DE CODIGO FONTE

CARACTERISTICA DE REDE SOCIAL, CONHECER PESSOAS NOVAS NA PROGRAMAÇAO.

GIHUB PAGES INTEGRADO

COLABORAÇAO

FORKS
---------------------------------------------------

OUTTRAS OOPÇOES DE REPOSITORIOS REMOTOS:

GITLAB

BITBUCKET

PHABRICATOR

GOGS

KALLITHEA 
----------------------------------
quem veio primeiro:

 o git ou o github?
---------------------------------------
 um pouco de historia?

1985

CVS: 

centralizado
Open source
Mais Popular
Alguns Problemas
--------------------------------
SVN: 2000

Centralizado
OpeN Source
Ativo ate hoje
CVS-like
-------------------------------------
Bitkeeper: 2000

Distribuido
Propietario
versao comunidade
CVS-free
---------------------
o kernel do linux era desenvolvdio  pelo bitkeeper

 andrel criou o source puller

andrew ultilizou de engenharia reversa e desenvolveu um cracker que conseguia destrava a coisas

-----------------------------

o git foi umsoftware criado pelo gir, por conta d euma treta com macvoi que era o criador da  ferramenta qued foi ultilizado paa desenvolver o nucleo da linux

--------------------------------
 GIT:

Distribbuido
Open Source
Feito em 10 dias
performance


dai foi criado o software de versionamento mais utlizado do mundo

GIT: o que é git? coisas que o linus torvald falou

tres letras do alfabeto

teimoso cabeça dura, Pensa que sempre esta certo

Global Information Tracker

Goddamn Idiotic Truckload of shit


------------------------

eo GIT HUB?

2008 : Git  hub

criadores: cris wanstret, pidgey wasted, tom preste, 

propietario - nao tem o codigo aberto
hospedagem de codigo
baseado em GIT

2009: 46K REPOSITORIOS
2010 100K USERS/ 1M DE REPOSITORIOS
2011: ULTRAPASSOU O SOURCEFORGE
2013 3M DE USERS/ 5M RES 
2016: 14 LUGAR NA LISTA DA FORBES CLOUD HUNDRED

É UMA LISTA DE 100 EMPRESAS DE NUVEM QUE TEM DE FICA DE OLHO POIS VAI SER AS EMPRESAS DO FUTURO

EM 2018 O HITHUB PASSO POR MOMENTOS DIFICEIS QUE PASSOU PELO MAIOR ATAQEU DE DDOS

DDOS É NEGAÇAO DE SERVIÇOS, CE VAI MONTAR UM MONTE DE MAQUINAS ZUMBIS E ESSES ZUMBIS VAO ATCA EM ALGUM MOMENTOS 

TOMARAM UM BACK GRANDE

EM 2018 ELES FORAM COMPRADOS PELA MICROSOFT  POR 7,5 BILHOES

SITE ANADELA DONA DA MICROSOFT

A  MICROSOF HOSPEDA NO GITH
PROJETOS DE GITHUB CRIADOS POR ELA MESMA


OPERAÇAO INDEPENDENTE  CONTINUARA

2020: GITHUB compra npm- node packet managaer

simon ocsly

istock ele criava coisas para istock

ele vendia os desenhos na istock photo 
-------------------------------------------------
para baixar a versao standalone do google é so no final do link depois do "/" colocar : ?standalone=1

standalone é a versao offline do google.

testando denovo

=---------------------------------

para fazer mudanças no seu projeto voce faz pelo visual studio code quando o seu repositorio ja estiver sincronizado com ele, para versionar é necessario commitar, isso pode ser feit pelo  git desktop

commitar faz vc sempre atualizar algo
---------------------------------------------------------------

ctrl + enter commita e ctrl +p da push
-----------------------------------------------------
O que é uma issue? issue é um problema, uma questao, quando se entra em projeto

vamos entra nesse repositorio, descori


issue é, descobri um problema, nao faço ideia de como se resolve e eu preciso de ajuda

pull request é, encontrei um problema, analisei o codigo, aprendi como rosolver, mechi no codigo, dei uma soluçao  e vou fala pro desenvolvedor que achei a soluçao e eai o outro programdor acha maneiro e te transforma em colaborador do projeto
-------------------------------------------------------------------------
primeiro passo das issues é procurar o problema que tu ta tendo nas isses que ja existem, nao sair criando issue
-----------------------------------------------
quando for cirar uma issues, o icone do link no editor da descriçao, dentro dos colchetes escreve oq a gente quer que a pessoa veja quando a gente for expor o link e no luga de url coloca o link que vc quer passar passa a pessoa 
--------------------------
para coloca algo em negrito no editor das issues no gir hub é so coloca o que vc quer em asterisco e asterisco
-----------------------------------
pra fazer a bolinha"." é so colocar um astrisco
------------------------------------------------
testar saved replie outro momento para procurar emprego como se fosse um mini curriculo 
------------------------------------------------------------
guia de linguagem markdown:

porque existe markdown sendo que existe markdown, html n é programaçao, markdown tbm n,


markdown é uma linguagem de marcaçao, é como se fosse um html mais simples

vou colocar mt s simbolos e marcas aqui para aprender markdown:

formataçoes simples:

estou aprendendo linguagem markdown no Curso em Video  de Git e GitHub

negrito: ** de cada lado ou dois underlines __

italico: _ ou  * de cada lado

riscar frases: ~~  de cada lado das frases

Criar titulos: os titulos nao é necessario colocar de cada lado, apenas no inicio

1 # =  titulo nivel 1
2 ## = titulo nivel 2
3 ### = titulo nivel 3 e por ai vai

para dividir uma area com outra usa-se: *** ou  ---

Listas numeradas: basta usar um numero e um ponto no começo

para as listas serem subtextos da outra basta  apertar a barra de espaço na frente e caso seja outra lista no caso uma sublista, é so repetir o passo da lista numerda que é qualquer numero. alem disso é importante deixar um espaço entre a lista numerada e a sublista 

para as listas demarcadas é so colocar um astrisco

* teste
* teste

como nesse exemplo acima
é possivel tambem fazer listas de tarefas com traço mais espaço mais colchete mais espaço mais colchete novamentente e de pois suas tarefas - [ ] 

- [ ] Git   
- [ ] MarkDown
- [ ] Issues
- [ ] Forks
- [ ] PullRequests
- [ ] Branches


apos fazer as tarefas é so colocar um x dentro dos colchetes
---------------------------------------------------------------------------------

para colocar imagens é so arrasta a imagem para o git abaixo da linha, tudo que estiver entre colchete apos o gir fazer o download da imagem, é a descriçao da imagem  

para links é quase a mesma coisa, apenas os colchetes e dentro dos colchetes, coloca a descriçao, depois dos colchetes, nao da espaço, os parenteses, assim: []()
---------------------------------------
Tabelas: Num | Aluno | Nota e embaixo dessa divisao  vamos colocar a linha da tabela,como: ---|---|---

para colocar comandos de codigos dentro do git com markdown é so colocar o comando entre crases, assim: `document.getElementById`

Ja para colocar um codigo inteiro, usasse tres crases uma embaixo da outra, desta forma abaixo:

```
m=checkTime(m);
s=checkTime(s);
document.getElementById('txt').innerHTML=h+":"+m+":"+s;
t=setTimeout('startTime()',500);

```


para colocar emojis é so colocar dois pontos e o nome do que voce quer, em cada lado, exemplo: precisa ser em ingles

:hand

e assim sucessivamente, 

no github da ikatiang
-------------------------------------------
Citaçoes e marcar pessoas
conseguimos marcar qualquer pessoas que tenha git hub

como diria @Gafanhotos eu estou com fome

resumindo é so colocar o @ e procurar o nome da pessoa

para especificar uma pessoa é so clica nos 3 pontinho e clica em quote reply,

Guanabara tem a porra de um manual e eu n precisava disso aqui, mas  tudo bem, porque isso aqui me ajuda a gravar.
----------------------
branch: conjunto de ramos

commita eh olha quero criar uma versao

master- commit - push - origin

origin eh o repositorio que e a origem 

evitar commitar td na ramificacao master

e vamos commitando e no fim o master n teve alteracao e vou alterando e commitando alterando commitando,
, td funcionou ok, agora juntar e fazer valwr como official, ai usAMOS  a oper'cao e usamos o merge,

 

 o ramo principal vai passa a ter essa feture que foi desenvolvida como um branch
-----------------------------------

e possivel tambem apaga a branch quando nao goste, essa feture eu tentei desenvolver e n consegui, tem como tbm gera outra versao branch
 ----------------------------------------
vou criar uma brach quando estiver criando o conteudo e vou criar outra branch quando estiver criando o desing que eh a parte em css,.

branches sao como se fossem arvores com muitos galhos, e os galhos sao as partes do seu site, as partes do seu site sao como os galhos que sao secundarios, e a arvore eh o todo e assim como os galhos modifica as arvores, os branchzinho modifica o branchzao

em seguida, vai ter a opcao de commitar, e eh ai que a magica acontece, porque  tudo que a agentemudou no conteudo no mastaer nao aparece, continua na versao base, ou seja o master alem de ser uma arvore, eh a base do site ou de seja la o que voces estejam fazendo e todas as branches que voce criar em cima do master ou main,  vao ficar com as configracoes originais as configuracoes da bASE QUE FOI CRIADA
------------------------------
 no visual studio code se voce quiser criar uma pasta direto do seu codigo eh so segurar ctrl em cima do nome do nome da pasta que quer criar.

o merge junta os conteudos e caso haja um conflito, eh so abrir com o visual studio code e logo escolherqual das duas versoes escolher.

------------------------------------------------
Hospedagem Gratis no GitHub Pages:

para colocar as imagens flutuando uma do \lado dooutro no css usa-se o class-lado, vou ver isso nos estudos de html

para fazer uma foto virar um link é so colocar dentro da ancora do link um img e dentro do img a foto que deseja

antes de fazer o merge ele vai ensina como habilita o githubstes

quando hospeda no github pagtes demora de 30s a 1m para aparecer na pagina, se por acaso fizer um push


a gente pode apaga tambem as branches que ja nao me servem mais, pois ja foi feito o merge 

é possivel incluir imgs dentro de links

vai no repositorio do site no github site - setting - pages - master branch - é preciso estar nas brach master, necessario
----------------------------------------------------------------------------

 O BASICO DE GIT PELO TERMINAL - DIO, CONTINUANDO ESTUDOS.

WINDOWS: terminal do windows é derivado do shell

- cd - entra e sai dos diretorio
- dir - lista
- mkdir - cria pastas
- del e rmdir- apaga arquivos e apaga pastas

- echo hello > hello.txt  - criou um arquivo

UNIX: terminal do linux é derivado do bash

- cd	
- ls
- mkdir
- rm -rf

-------------------------
comandos:

o primeiro comando vai ensinar a listar e se situar e ajudar5a a entender em qual  local estamos, no windows esse comando se chama dir

dir vai trazer uma lista de diretorios

cd / leva pra base do diretorio do qual vc se encontra e serve pra navega em lugares especificos no sistema

macete; digitando cd + espaço + letra  de plavra desejada + tab e logo depois usar o dir para listar  - tudo isso signifiica q	ue estamos entrando na pasta e listando o que tem nela


exmp no linux: cd etc que é uma pasta do sistema operacional linux e logo depois usar o ls para listar tudo novamente

o comando para limpar a tela no windfows é cls

no linux éo clear e com ctrl + l vc faz o mesmo efeito do clear

mkdir + o nome da pasta q deseja criar, esse comando cria pastas isso no wuindows

no linux ocmo estamos em um subsistema linux, precisamos primeiro pegar permissao e so depois ncontinuar

para pedir permissao, sudo su e ai vai pedir para incluir a senha

-----------------------
agora no windows: para criar arquivos, usa o comando echo hello dentrod a pasta desejada com o simbolo de maior que + o nome do arquivo que vc quer criar e a extensao exemplo:

echo hello > hello.txt

o comando del deleta apenas arquivos  e nao repositorios 

rmdir e o repositorio que vc quer exclui, 
------------------------------
entendendo como funciona o git

sha1 é um algoritmo de ecriptaçao, encripataçao gera conjunto de caracteres identificados de 40 digitos - é uma forma curta de representar um arquivo

1 echo "ola mundo" | openssl sha1
2 > (stdin)= f9089702349874012893buhdgfbisu09878

exemplo mostrado, no gitbash here no desktop testeando sha1 - com isso o git garante que os arqyuivos sofreram modificaçoes e garantir que naquele arquivo tem as mesmas coisas, isso serve tambem para objetos internos

objetos fundamentais

sistema distribuido

---------------------------

usando o comando "git clone" e clonar o link do repositorio no git bash vc consegue clonar o seu repositorio que foi feito diretamente 2rmdir


https://github.com/shellymk/Livro-Receitas2.git


git status, conseguimos ver o que foi feito e as mudancas na ma
---------------------------------------------------------------------

objetos fundamentais:

Blobs: contem metadados dentro deles. do git, tamanho da string essas coisas

trees 

Commits

-----------------------------
Primeiro exemplo blobs:


a funçao echo que vai pegar uma string e cuspir o output dessa string para uma funçao do git que chama hash o stdin espera receber esse arquivo que estamos enviando o texto entao se passarmos a string "conteudo" ela vai devolver pra gente o sha1 desse conteudo

echo 'conteudo' | git hash-object --stdin


echo -e 'conteudo' | openssl sha1

------------
segundo objetos as trees

tambem contem metadados, aponta a um blob, e guarda o nome do Arquivo, a arvore vai ser responsavel por monta toda estrutura onde esta localizado, uma arvore pode apontar pra outra arvore e as arvores tambem tem um sha1 desses metadados

------------------------- 

e por ultimo temos o commit

o commit aponta pra uma arvore, para um autor, mensagem e uma arvore






